#class mapper open;


#map read map.tt;
#read mapper-paths.tt;

#var fromdir[enter] out;
#var fromdir[out] enter;
#var fromdir[north] south;
#var fromdir[west] east;
#var fromdir[east] west;
#var fromdir[south] north;
#var fromdir[up] down;
#var fromdir[down] up;
#var fromdir[northup] southdown;
#var fromdir[westup] eastdown;
#var fromdir[eastup] westdown;
#var fromdir[southup] northdown;
#var fromdir[northdown] southup;
#var fromdir[westdown] eastup;
#var fromdir[eastdown] westup;
#var fromdir[southdown] northup;
#var fromdir[southeast] northwest;
#var fromdir[northwest] southeast;
#var fromdir[southwest] northeast;
#var fromdir[northeast] southwest;

#var shortdir {{east}{e} {west}{w} {north}{n} {south}{s} {northeast}{ne} {northwest}{nw} {southeast}{se} {southwest}{sw} {up}{u} {down}{d} {northup}{nu} {northdown}{nd} {southup}{su} {southdown}{sd} {eastup}{eu} {eastdown}{ed} {westup}{wu} {westdown}{wd} {enter}{enter} {out}{out}};

#var {areas} {
    {1}{牙山}
    {2}{江州}
    {3}{襄阳}
    {4}{全真}
    {5}{灵鹫}
    {6}{黄河北岸}
    {7}{星宿}
    {8}{黄河南岸}
    {9}{桃花岛}
    {10}{嘉兴}
    {11}{大理城中}
    {12}{泉州}
    {13}{岳阳}
    {14}{镇江}
    {15}{泰山}
    {16}{扬州}
    {17}{中原}
    {18}{南昌}
    {19}{晋阳}
    {20}{湟中}
    {21}{丐帮}
    {22}{归云庄}
    {23}{张家口}
    {24}{临安府}
    {25}{建康府北城}
    {26}{西湖}
    {27}{长江北岸}
    {28}{华山}
    {29}{北京}
    {30}{福州}
    {31}{武当山}
    {32}{神龙岛}
    {33}{日月神教}
    {34}{天龙寺}
    {35}{少林寺}
    {36}{丝绸之路}
    {37}{平西王府}
    {38}{灵州}
    {39}{岳王墓}
    {40}{建康府南城}
    {41}{大理}
    {42}{信阳}
    {43}{小山村}
    {44}{峨嵋}
};

#var {locations} {
    {黄河北岸黄河北岸} {{黄河北岸}{黄河北岸}}
    {黄河南岸黄河南岸} {{黄河南岸}{黄河南岸}}
    {牙山牙山米行} {{牙山}{牙山米行}}
    {牙山牙山湾南路} {{牙山}{牙山湾南路}}
    {星宿星宿海} {{星宿}{星宿海}}
    {南昌南昌北门} {{南昌}{南昌北门}}
    {大理城中中心广场} {{大理城}{中心广场}}
    {平西王府平西王府大门} {{平西王府}{平西王府大门}}
    {桃源桃源驿站} {{桃源}{桃源驿站}}
};

#var badlocations {桃源黑沼|少林寺竹林|日月神教长廊|少林寺松树林|北京校场|嘉兴海中|神龙岛男弟子住所|北京厅堂|扬州宝库|归云庄桃树|长江长江岸边|长江长江渡口};

#alias parselocation {
    #var {area} {};
    #var {location} {};
    #var tmp $locations[%1];
    #if {"$tmp" != ""} { #var area *tmp[+1]; #var location $tmp[+1];};
    #else {
        #foreach {${areas[%*]}} {area} {
            #if {"%1" == "$area%*"} {
                #var area $area;
                #var location @replace{{%1} {$area} {};};
                #if {"%1" == "$area$area$location"} {#var location $area$location};
                #replace area {建康府南城} {建康府};
                #replace area {建康府北城} {建康府};
                #replace area {西湖} {临安府};
                #replace area {福州} {闽南};
                #replace area {大理城中} {大理};
                #replace area {小山村} {华山村};
                #return;
            };
        };
        #var location None;
    };
};

#alias setarea {
    #gag %*;
    #action {^【%%1地图%*】} {#var roomarea %%1; #unaction {^【%*地图%*】}};
    #action {^[临时存储讯息]} {#ungag %*};
    #action {^Room vnum:} {#ungag %*};
    lm; q;
    #delay 1 #ungag %*;
};

#alias maphere {
    #map get roomvnum roomvnum;
    #map get roomname roomname;
    #map get roomarea roomarea;
    #map get roomdesc roomdesc;
    #map get roomnote roomnote;
    #showme <fca>Room vnum: $roomvnum;
    #showme <fca>Room name: $roomname;
    #showme <fca>Room area: $roomarea;
    #showme <fca>Room desc: $roomdesc;
    #showme <fca>Room note: $roomnote;
};

#alias mapdone {
    #if {"%1" != ""} {#map at %1 mapdone};
    #else { #map roomflag static on};
};

#alias getmapdesc {
    #class mapaction open;
    #action {^    {(?!(「|一片浓雾中，什么也看不清|这里(唯一|明显)的(方向|出口)有)|.*正盘膝坐在地下|.*脸上神色平和，身形凝重，稳如山岳。).*。$}}{%1 %%0};
    #class mapaction close;
};

#function parseexit {
    #if {"%1" != "%*{、|和}%*"} {#return $shortdir[%1]};
    #elseif {"%1" != "%*、%*"} { 
        #regexp {%1} {^%!{(.*) 和 (.*)}} {
            #var tmp {$shortdir[&1];$shortdir[&2]};
        };
    };
    #else { #regexp {%1} {^%!{([^、]+)、(.* 和 .*)}} {#var tmp @parseexit{{&2} {$shortdir[&1]}}; }; };
    #if {"%2" != ""} {#return {%2;$tmp}};
    #else {#return $tmp};
};

#alias loadmap {
    #map goto 1;
    #var roomname {};
    #var fulldesc {};
    #class loadmap open;
    #gag {^>};
    #gag {^$};
    #action {^%%1 -} {
        #map list {%%1} {variable} {vnums};
        #if {"%%1" == "%*的储物柜"} {#showme <fca>将在离开储物柜后重试。};
        #elseif {&{vnums[]} == 1} {#map goto %%1; maphere};
        #elseif {&{vnums[]} == 0} {#showme <fca>房间不存在，将在移动后重试。};
        #else { 
            #class loadmap open;
            #act {^    %!{这里(唯一|明显)的(方向|出口)有} %%%3。} {
                #map list {%%1} {} {$fulldesc%*} {variable} {vnums};
                #if {&{vnums[]} == 1} {#map goto *vnums[+1]; maphere};
                #else {
                    #var exits @parseexit{{%%%3}};
                    #map list {%%1} {$exits} {$fulldesc%*} {variable} {vnums}; 
                    #if {&{vnums[]} == 1} {#map goto *vnums[+1]; maphere};
                    #else {
                        #gag %*;
                        #class setarea open;
                        #action {^【%%%%1地图%*】} {
                            #var roomarea %%%%1; #unaction {^【%*地图%*】};
                            #map goto {%%1} {$exits} {} {$roomarea};maphere;#class setarea kill;
                        };
                        #action {^[临时存储讯息]} {#ungag %*};
                        #action {^Room vnum:} {#ungag %*};
                        #class setarea close;
                        lm; q;
                        #delay 1 #ungag %*;
                    };
                };
            };
            #class loadmap close;
            getmapdesc {builddesc %%1};
        };
    };
    #action {Room name: %*} {#undelay mg; #class mapaction kill; #class loadmap kill;};
    #class loadmap close;
    #split 10 2;
    #map flag vtmap on;
    l;
};

#alias unloadmap {
    #map leave;
    #unsplit; #split;
};

#alias mapsize {#unsplit; #split %1 2};

    
#alias map {
    #class tmp open;
    #gag {^>};
    #gag {^$};
    #action {^%%1 -} {
        #map set roomarea $roomarea;
        #map set roomname %%1;
        getmapdesc {mapdesc};
    };
    #class tmp close;
    setarea;
    l;
    #delay 1 {#class mapaction kill; #class tmp kill;};
};


#alias builddesc {
    #if {"$fulldesc" == ""} {#var fulldesc %2;};
    #else {
       #regexp {$fulldesc} {{.*}%2{.*}} {#return} {#var fulldesc $fulldesc|%2;};
    };
    #map list {%1%*} {} {%*%2{(\|.*|)}} {variable} {tmp};
    #if {&tmp[] == 1} {#map goto *tmp[+1];maphere;};
};

#alias mapdesc {
    #map get roomdesc roomdesc;
    #if {"$roomdesc" == ""} {#map set roomdesc %1;maphere};
    #else {
       #regexp {$roomdesc} {{.*}%1{.*}} {maphere} {#map set roomdesc $roomdesc|%1; maphere};
    };
};

#alias mapnote {
    #map get roomnote roomnote;
    #if {"$roomnote" == ""} {
        #map set roomnote %1;
    } {
        #map set roomnote $roomnote|%1;
    };
    maphere;
};

#alias mi {#map info};
#alias mm {#map move %1; mi};
#alias mg {
    #if {"%1" == "{\d+}"} {#map goto %1};
    #else {#map goto {%1%*} {} {%*%3%*} {%2%*}};
    maphere;
};

#alias ml {#map list {%*%1%*} {} {%*%3%*} {%2%*}};
#alias mldesc {#map list {%*} {} {%*%1%*}};
#alias mlarea {
    #if {"%1" == ""} {maphere; #if {"$roomarea" != "" } {mlarea $roomarea}} {#map list {%*} {} {} {%1%*}};
};
#alias mlnote {#map list {%*} {} {} {} {%*%1%*}};

#alias mapnum {#map flag asciigraphics on; #map flag asciivnums on};
#alias mapnonum {#map flag unicodegraphics on;};
#alias mapvoid {#map insert %1 void; #map map};
#alias savemap {#map write map.tt;};



#alias mazeexit {
    
    #map exit %1 command {
        #class mazewalk open;
        #var fromdir[north] south;
        #var fromdir[west] east;
        #var fromdir[east] west;
        #var fromdir[south] north;
        #var fromdir[up] down;
        #var fromdir[down] up;
        #var fromdir[northup] southdown;
        #var fromdir[westup] eastdown;
        #var fromdir[eastup] westdown;
        #var fromdir[southup] northdown;
        #var fromdir[northdown] southup;
        #var fromdir[westdown] eastup;
        #var fromdir[eastdown] westup;
        #var fromdir[southdown] northup;
        #var fromdir[southeast] northwest;
        #var fromdir[northwest] southeast;
        #var fromdir[southwest] northeast;
        #var fromdir[northeast] southwest;
        #var lastdir %2;
        #var found 0;
        #action {你逃跑失败。} {
            #delay 1 lastdir;
        } 1;
        #action {%3} {
            #showme <fca>到达目标地点：%4;
            #var found 1;
            #map goto %4;
            #class mazewalk kill;
        } 2;
        #action {这里明显的方向有 %%1、%%2 和 %%3。} {
            #showme <fca> 岔路自动停止;
            #var found 1;
            #map goto %4;
            #class mazewalk kill;
        } 3;
        #action {这里明显的方向有 %%1 和 %%2。} {
            #if {$found == 0} {
                #regex %%1 {$fromdir[$lastdir]} {
                    #showme going %%2;
                    #var lastdir %%2;
                    %%2;
                } {
                    #showme going %%1;
                    #var lastdir %%1;
                    %%1;
                };
            };
        };
        #class mazewalk close;
        set brief 1;
        %1;
    };
};

#alias mazeexit-special {
    
    #map exit %1 command {
        #class mazewalk open;
        #var fromdir[north] south;
        #var fromdir[west] east;
        #var fromdir[east] west;
        #var fromdir[south] north;
        #var fromdir[up] down;
        #var fromdir[down] up;
        #var fromdir[northup] southdown;
        #var fromdir[westup] eastdown;
        #var fromdir[eastup] westdown;
        #var fromdir[southup] northdown;
        #var fromdir[northdown] southup;
        #var fromdir[westdown] eastup;
        #var fromdir[eastdown] westup;
        #var fromdir[southdown] northup;
        #var fromdir[southeast] northwest;
        #var fromdir[northwest] southeast;
        #var fromdir[southwest] northeast;
        #var fromdir[northeast] southwest;
        #var lastdir %2;
        #var found 0;
        
        #action {你逃跑失败。} {
            #delay 1 lastdir;
        } 1;
        #action {%3} {
            #showme <fca>到达目标地点：%4;
            #var found 1;
            #map goto %4;
            #unticker walkmaze;
            set brief 1;
            #class mazewalk kill;
        } 2;
        #action {这里明显的方向有 %%1、%%2 和 %%3。} {
            #showme <fca> 岔路自动停止;
            #var found 1;
            #map goto %4;
            #unticker walkmaze;
            set brief 1;
            #class mazewalk kill;
        } 3;
        #action {这里明显的方向有 %%1 和 %%2。} {
            #if {$found == 0} {
                #regex %%1 {$fromdir[$lastdir]} {
                    #showme going %%2;
                    #var lastdir %%2;
                    %%2;
                } {
                    #showme going %%1;
                    #var lastdir %%1;
                    %%1;
                };
            };
        };
        #class mazewalk close;
        set brief 3;
        %1;
        #ticker walkmaze {l} 0.6;
    };
};

#alias bianli {
    #map list {%2%*} {} {} {%1%*} {variable} {vnums};
    #var idx 1;
    #list vnums size vnumsize;
    #showme <fca>遍历地点数量：$vnumsize;
    bianli.next;
};

#alias bianli.next {
    #class bianli open;
    #act {到达目标地点：%*} {
         #if {$idx >= $vnumsize} {#showme <fca>遍历完成; bianli.stop};
         #else {
             #delay bianli {#math idx {$idx + 1}; bianli.next} {1};
         };
    };
    #class bianli close;
    #map get roomvnum roomvnum;
    #if {$vnums[+$idx][distance] < 0} {#math idx {$idx + 1}; bianli.next};
    #elseif{$roomvnum == $vnums[+$idx]} {#math idx {$idx + 1}; bianli.next}; 
    #else {#showme <fca>遍历进度：$idx/$vnumsize; run *vnums[+$idx];};
};
    
#alias bianli.stop {
    #undelay bianli;
    #class bianli kill;
};

#class mapper close;
